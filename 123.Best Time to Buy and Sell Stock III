class Solution(object):
    def maxProfit(self, prices):
        """
        :type prices: List[int]
        :rtype: int
        """
        if len(prices) == 0:    
            return 0
        else:
            length = len(prices)
            min_v,max_v,profit = prices[0],prices[0],[0]*length
            min_vr,max_vr,profit_r = -prices[length-1],-prices[length-1],[0]*length
            for i in xrange(1,length):
                if prices[i] > max_v:
                    max_v = prices[i]
                    profit[i] = max(profit[i-1],max_v-min_v)
                elif prices[i] < min_v:
                    min_v,max_v = prices[i],prices[i]
                    profit[i] = profit[i-1]
                else:   profit[i] = profit[i-1]
            for j in xrange(length-2,-1,-1):
                if -prices[j] > max_vr:
                    max_vr = -prices[j]
                    profit_r[j] = max(profit_r[j+1],max_vr-min_vr)
                elif -prices[j] < min_vr:
                    min_vr,max_vr = -prices[j],-prices[j]
                    profit_r[j] = profit_r[j+1]
                else:   profit_r[j] = profit_r[j+1]
            res = 0
            for k in xrange(length):
                if profit[k] + profit_r[k] > res:
                    res = profit[k] + profit_r[k]
            return res
  """
  Array
  Dynamic Programming
  """
