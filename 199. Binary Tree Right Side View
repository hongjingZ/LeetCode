# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def rightSideView(self, root):
        """
        :type root: TreeNode
        :rtype: List[int]
        """
        if root == None:    return []
        my_queue = [(root,0)]
        my_dict,ans = {},[]
        while(my_queue):
            node,level = my_queue.pop(0)
            if level not in my_dict:
                my_dict[level] = node.val
                ans.append(node.val)
            if node.right:
                my_queue.append((node.right,level+1))
            if node.left:
                my_queue.append((node.left,level+1))
        return ans
def rightSideView(self, root):
    def collect(node, depth):
        if node:
            if depth == len(view):
                view.append(node.val)
            collect(node.right, depth+1)
            collect(node.left, depth+1)
    view = []
    collect(root, 0)
    return view
