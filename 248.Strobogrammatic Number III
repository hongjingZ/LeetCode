class Solution(object):
    def strobogrammaticInRange(self, low, high):
        a, b = self.below(high,), self.below(low, include = False) 
        return a -b if a > b else 0
        
    def below(self, n, include=True):
        res = 0
        for i in xrange(1, len(n)):
            res += self.number(i)
        l = self.findStrobogrammatic(len(n))
        if include:
            tmp = [num for num in l if num <= n]
        else:
            tmp = [num for num in l if num < n]
        return res + len(tmp)
    
    def findStrobogrammatic(self, n):
        dic = {"0":"0","1":"1","6":"9","8":"8","9":"6"}
        return self.recursion(n,dic,1)
        
    def recursion(self,n,dic,flag):
        if n == 0:  return [""]
        elif n == 1:    return ["0","1","8"]
        else:
            temp = []
            for i in dic:
                if flag == 1 and i == "0": continue
                for element in self.recursion(n-2,dic,0):
                    temp.append(i+element+dic[i])
            return temp
    
    def number(self, l):
        if l == 0:  return 0
        if l % 2 == 0:  return 4*(5**(l/2-1))
        elif l == 1:    return 3
        else:   return 3*(5**(l/2-1))*4
  """
  Math
  Recursion
  """
