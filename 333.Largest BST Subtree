# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def largestBSTSubtree(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        if root == None:    return 0
        flag,max_val,min_val,temp,res = self.dfs(root)
        return res
    def dfs(self,node):
        if node and not node.left and not node.right:
            flag,max_val,min_val,temp,res = 1,node.val,node.val,1,1
            return (flag,max_val,min_val,temp,res)
        else:
            l_flag,l_max,l_min,l_temp,l_res = 1,float('-inf'),float('inf'),0,1
            r_flag,r_max,r_min,r_temp,r_res = 1,float('-inf'),float('inf'),0,1
            if node.left:
                l_flag,l_max,l_min,l_temp,l_res = self.dfs(node.left)
            if node.right:
                r_flag,r_max,r_min,r_temp,r_res = self.dfs(node.right)
            if l_flag == -1 or r_flag == -1:
                return (-1,0,0,1,max(l_res,r_res))
            else:
                if node.val <= l_max or node.val >= r_min:
                    return (-1,0,0,1,max(l_res,r_res))
                else:
                    temp = l_temp + r_temp+1
                    max_val = max(r_max,node.val)
                    min_val = min(l_min,node.val)
                    if temp > max(l_res,r_res):  res = temp
                    else:
                            res = max(l_res,r_res)
                    return (1,max_val,min_val,temp,res)
  """
  Tree
  """
