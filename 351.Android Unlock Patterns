public class Solution {
    int res=0;
    public int numberOfPatterns(int m, int n) {
        boolean[][] keyboard = new boolean[3][3];
        for (int i=0;i<3;i++){
            for (int j=0;j<3;j++){
                keyboard[i][j] = false;
            }
        }
        for (int p=m;p<=n;p++){
            for (int i=0;i<3;i++){
                for (int j=0;j<3;j++){
                    keyboard[i][j] = true;
                    helper(keyboard,p-1,i,j);
                    keyboard[i][j] = false;
                }
            }
        }
        return res;
    }
    private void helper(boolean[][] keyboard,int left, int x, int y){
        if (left == 0){
            res++;
            return;
        }
        for (int i=0;i<3;i++){
            for (int j=0;j<3;j++){
                if (keyboard[i][j] 
                    ||  (x==i && Math.abs(y-j)>1) && !keyboard[x][1]
                    ||  (y==j && Math.abs(x-i)>1) && !keyboard[1][y]
                    ||  (x+y == i+j) && Math.abs(x-i) >1 && !keyboard[1][1]
                    ||  (x-y == i-j) && Math.abs(x-i) >1 && !keyboard[1][1]
                    ||  (x == i && y == j)) {
                    continue;
                }
                else{
                    keyboard[i][j] = true;
                    helper(keyboard,left-1,i,j);
                    keyboard[i][j] = false;
                }
            }
        }
    }
}
